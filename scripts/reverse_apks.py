#!/usr/bin/env python

## Simple python script to process all APKs in a specified path
## by converting to .jar and unzipping to named folders
## 2018 - Kristina Balaam | hello@chmodxx.net

import os
import subprocess
from subprocess import Popen, PIPE
import sys

# Find this user's instance of dex2jar.sh
def get_dex2jar():
    dex2jar = Popen(["find", "/Users", "-name", "d2j-dex2jar.sh", "-print", "-quit"], stdout=subprocess.PIPE)
    
    # Read from stdout
    return dex2jar.stdout.readline().rstrip()

# Disassemble .dex to .class files zipped in JAR, and unzip to directory
# with the same name as APKs
# return path name of these two directories
def disassemble_apk(path, apk_path, dex2jar):
    # Disassemble APK with dex2jar and unzip jar file to its
    # own directory

    # Call Dex2Jar for the specified APK path in the
    # specified directory
    subprocess.call(["sh", dex2jar, "-f", apk_path], cwd=path)

    # Determine jar path to eventually unzip it
    jar_path = apk_path.replace(".apk", "-dex2jar.jar")
   
    # Unzip 
    subprocess.call(["unzip", "-o", "-q", jar_path, "-d", apk_path.replace(".apk", "-Unzipped")])

    return apk_path.replace(".apk", "-Unzipped")

# Retrieve absolute paths for all APK files at specified path
def retrieve_all_apks(path):    
    all_apks = []

    # traverse directory structure of the path and store
    # full filenames to list
    for root, dirs, files in os.walk(path):
        for name in files:
            if name.endswith(".apk"):
                all_apks.append(os.path.join(root, name))
   
    return all_apks

def main(path):

    # Retrieve dex2jar file and all apks to be disassembled and compared 
    dex2jar_path = get_dex2jar()
    all_apks = retrieve_all_apks(path)

    # Store unzipped directory paths
    unzipped_paths = []

    # Disassemble all apks
    for apk_path in all_apks:
        unzipped_paths.append(disassemble_apk(path, apk_path, dex2jar_path))
  
    return True



if __name__ == '__main__':
    sys.exit(main(sys.argv[1]))



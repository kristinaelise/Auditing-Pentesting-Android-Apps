# Auditing Android Apps

## Getting Started with Drozer

### What is Drozer?

_drozer_, aka. _Mercury_, is used to assess Android applications by discovering vulnerabilities and passing payloads of known vulnerabilities to your application. 

We'll be covering the basics of _drozer_, but you can learn more through this
[extensive user guide](https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf)

## Installing Drozer

### If you're currently running OSX, continue below. If you're running a Linux distribution, thank you for making life easier. Collect 100 pts and continue to [Installing Drozer with the CLI].

#### Installing drozer on OSX? Start a Linux VM

Installing _drozer_ on OSX is...a challenge. You'll likely get stuck in dependency hell. There are some handy guides for getting it running on OSX, including this [OWASP Mobile Security Testing Guide](https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/content/0x05b-Basic-Security_Testing.html) which everyone should read.

Instead of dealing with this, we're going to spin up a Linux VM.

**Install VirtualBox for OSX by clicking [here](https://download.virtualbox.org/virtualbox/5.2.16/VirtualBox-5.2.16-123759-OSX.dmg)**.  

/Screen Shot 2018-08-11 at 09.30.09.png
 
Create a new virtual machine, setting the `type` to `Linux` and the Version to `Ubuntu` (unless you have a preference for another Linux distro. We'll be using _Lubuntu_, a lighter-weight Ubuntu, in this workshop.)

**Next, download the `Lubuntu` image [here](http://cdimage.ubuntu.com/lubuntu/releases/18.04/release/lubuntu-18.04.1-desktop-amd64.iso),** unless you're running your VM on an older Mac, in which case you should checkout the `Lubuntu` downloads page [here](https://lubuntu.me/downloads/).

Personally, my most-used Linux distro is [Kali](https://www.kali.org/), which is a "pen-testing and ethical hacking Linux distribution". If you want to spend more time learning about pen-testing and ethical hacking, I highly recommend it. For the purpose of this workshop, however, Lubuntu (or any other supported Linux distro should be fine).

/Screen Shot 2018-08-11 at 09.30.16.png

**Bump up the memory size to allocate to the VM from the suggested 1024MB to ~8192MB.** Allocating too little RAM will result in a corrupted display when you try to install the image.

/Screen Shot 2018-08-11 at 09.30.25.png

**Create a virtual hard disk with a minimum of 10 GB of space.** I tend to add a bit more, since I never know what else I may do with the VM in the future.

/Screen Shot 2018-08-11 at 09.30.28.png

I also tend to select `Fixed size` hard disk file settings for my VMs because I care more about speed than being able to dynamically allocate additional space in the future.

/Screen Shot 2018-08-11 at 09.30.33.png

/Screen Shot 2018-08-11 at 09.30.38.png

**Select _Create_**

**Important!** Before opening the new VM, we have to update settings in its display. The latest Lubuntu release requires that you bump up the processing power of the VM before you can access a display that isn't wildly corrupted (ie, the same issue you'd experience with allocating too little RAM).

/Screen Shot 2018-08-11 at 09.31.23.png

**Right-click on the VM and open settings.** Navigate to *Display* and update your settings as shown below:

/Screen Shot 2018-08-11 at 09.31.37.png

**Hit okay, and your settings will save.**

/Screen Shot 2018-08-11 at 09.32.31.png

**Double click the new VM in the left-hand column.** Select your `Lubutunu` ISO and continue with the installation process.


##### Congratulations! You now have a virtual machine ðŸŽ‰

### Installing Drozer

[Download the Debian package here](https://github.com/mwrlabs/drozer/releases/download/2.4.4/drozer_2.4.4.deb)

`sudo apt install python` # Get python 2.7+

`sudo apt --fix-broken install` # Get all the python dependencies

/Screen Shot 2018-08-11 at 10.03.58.png

`sudo dpkg -i drozer_2.x.x.deb`

/Screen Shot 2018-08-11 at 10.14.23.png

`sudo apt update`
`java -version`
`sudo apt install default-jre`
 
`drozer`

*For Kristina to do: download, compile and build the DiVA app and make available in Github repo on chmodxx account for the workshop*

*Install 32-bit libraries*
If you're using Ubuntu or anything else Debian, 
`sudo apt-get install lib32ncurses5 lib32stdc++6`

else, find the appropriate packages for your distro & install.

`sudo apt install android-sdk android-sdk-platform-23 android-sdk-platform-23`

`emulator -avd avd_name`
`adb install path_to_apk`

`adb pull remote local # copy files from a device`
`adb push local remote # copy files to a device` 

[Android Studio ADB CLI guide](https://developer.android.com/studio/command-line/adb)


## Reversing Android Applications

Find the package name
`adb shell pm list packages`

Get the full path
`adb shell pm path com.example.someapp`

Pull from the device
`adb pull /data/app/com.example.app.apk [local path]`

### Install [dex2jar](https://github.com/pxb1988/dex2jar)

`git clone https://github.com/pxb1988/dex2jar.git`

### Install [apktool](https://ibotpeaches.github.io/Apktool/install/)

### Install [jd-gui](http://jd.benow.ca/)

### Install [jadx](https://github.com/skylot/jadx)




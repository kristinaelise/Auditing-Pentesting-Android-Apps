# Auditing & Pentesting Android Apps

## Getting Started with Android Security Tooling

### What is Drozer?

[_drozer_](https://github.com/mwrlabs/drozer), aka. _Mercury_, is used to assess Android applications by discovering vulnerabilities and passing payloads of known vulnerabilities to your application. 

We'll be covering the basics of _drozer_, but you can learn more through this
[extensive user guide](https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf)

### If you're currently running OSX, continue below. If you're running a Linux distribution, thank you for making life easier. Collect 100 pts and continue to [Installing Drozer](#installing-drozer).

## Create a Linux VM

Installing _drozer_ on OSX is...a challenge. You'll likely get stuck in dependency hell. There are some handy guides for getting it running on OSX, including this [OWASP Mobile Security Testing Guide](https://sushi2k.gitbooks.io/the-owasp-mobile-security-testing-guide/content/0x05b-Basic-Security_Testing.html) which everyone should read.

Instead of dealing with this, we're going to spin up a Linux VM.

**â˜… Install VirtualBox for OSX by clicking [here](https://download.virtualbox.org/virtualbox/5.2.16/VirtualBox-5.2.16-123759-OSX.dmg)**.  

**â˜… Create a new virtual machine, setting the `type` to `Linux` and the Version to `Ubuntu`**

![](/img/Create_VM.png)

_(unless you have a preference for another Linux distro. We'll be using _Lubuntu_, a lighter-weight Ubuntu, in this workshop.)_

**â˜… Next, download the `Lubuntu` image [here](http://cdimage.ubuntu.com/lubuntu/releases/18.04/release/lubuntu-18.04.1-desktop-amd64.iso),**
 
_(unless you're running your VM on an older Mac, in which case you should checkout the `Lubuntu` downloads page [here](https://lubuntu.me/downloads/)_

Personally, my most-used Linux distro is [Kali](https://www.kali.org/), which is a "pen-testing and ethical hacking Linux distribution". If you want to spend more time learning about pen-testing and ethical hacking, I highly recommend it. For the purpose of this workshop, however, Lubuntu (or any other supported Linux distro should be fine).

**â˜… Bump up the memory size to allocate to the VM from the suggested 1024MB to ~8192MB.** Allocating too little RAM will result in a corrupted display when you try to install the image.

![](/img/Set_VM_Memory.png)

**â˜… Create a virtual hard disk with a minimum of 10 GB of space.** I tend to add a bit more, since I never know what else I may do with the VM in the future.

![](/img/Create_VM_HDD.png)

I also tend to select `Fixed size` hard disk file settings for my VMs because I care more about speed than being able to dynamically allocate additional space in the future.

![](/img/Fixed_Size_HDD.png)

**â˜… Select _Create_**

**Important!** Before opening the new VM, we have to update settings in its display. The latest Lubuntu release requires that you bump up the processing power of the VM before you can access a display that isn't wildly corrupted (ie, the same issue you'd experience with allocating too little RAM).

**â˜… Right-click on the VM and open settings.** Navigate to *Display* and update your settings as shown below:

![](/img/Right_Click_New_VM.png)

![](/img/Set_4_cores.png)

**â˜… Hit okay, and your settings will save.**

**â˜… Double click the new VM in the left-hand column.** Select your `Lubutunu` ISO and continue with the installation process.

![](/img/Lubuntu_startup.png)

##### Congratulations! You now have a virtual machine ðŸŽ‰

### <a name="installing-drozer"></a>Installing Drozer 

[Download the Debian package here](https://github.com/mwrlabs/drozer/releases/download/2.4.4/drozer_2.4.4.deb)

`sudo apt install python` # Get python 2.7+

`sudo apt --fix-broken install` # Get all the python dependencies

![](/img/Install_Drozer.png)

`sudo dpkg -i drozer_2.x.x.deb`

![](/img/Install_Java.png)

```shell
sudo apt update
java -version
sudo apt install default-jre
```

**â˜… Install 32-bit libraries**

If you're using Ubuntu or anything else Debian, 
```shell
sudo apt-get install lib32ncurses5 lib32stdc++6
```

else, find the appropriate packages for your distro & install.

```shell
sudo apt install android-sdk android-sdk-platform-23 android-sdk-platform-23
```

## Setting Up Our Reversing Environment

The tools we'll be using today are very usable in OSX. However, for the sake of maintaining a bit of a "hackerbox", we're going to install them within our Linux VM.

### Install [Apktool](https://ibotpeaches.github.io/Apktool/install/)
 
Apktool is a handy application that allows us to decompile an APK and view the _SMALI_ files packaged within. Decompiling the app with Apktool will also allow us to view `AndroidManifest.xml` for a basic understanding of what an app is doing, as well as areas where permissions may be over-granted.

If you want to make changes to a decompiled application, you can use Apktool to re-build the app as well. We won't be doing that in today's workshop, but it's useful for future reversing projects. 

**â˜… Download a wrapper script & rename** 

```shell
wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool.bat
```

**â˜… Download the latest Apktool**
```shell
wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.3.3.jar
mv apktool_2.3.3.jar apktool
```

**â˜… Move downloaded files to `bin`**
```shell
sudo mv apktool.jar /usr/local/bin
sudo mv apktool /usr/local/bin
sudo chmod +x /usr/local/bin/apktool.jar
sudo chmod +x /usr/local/bin/apktool
```

### Install [dex2jar](https://github.com/pxb1988/dex2jar)

Dex2Jar will allow us to convert `classes.dex`, the Dalvik Executable, to readable `.class` files. For ART apps where the dex files are converted to OAT files, we can still extract the `.dex` files and convert to `.class`. Once we have `.class` files for each of the, well, classes in the app, we'll use JD-GUI to view them.

```shell
git clone https://github.com/pxb1988/dex2jar.git
```

### Install [jd-gui](http://jd.benow.ca/)

As mentioned, JD-GUI will display the Java source code of our `.class` files. 

```shell
wget https://github.com/java-decompiler/jd-gui/releases/download/v1.4.0/jd-gui_1.4.0-0_all.deb
sudo dpkg -i jd-gui_x.x.x-x_all.deb 
```

### Decompiling the APK

We're going to use a little python script to automate this process, but you can certainly run all of the steps independently. Take a look at the python file to see how we're using the apps if you'd like. 

```shell
./reverse_apks.py [path-to-apk]
```

The resulting directory at `[path-to-apk` will have the .jar file we'll use to view the decompiled `classes.dex` file, along with the disassembled resources from running Apktool.

## Installing DiVA in an Emulator

**â˜… Start an emulator**
```shell
emulator -avd [avd name]
```

**â˜… Install the APK**
```shell
adb install [path/to/apk]
```

## Intro to Through the DiVA Application

### Insecure Logging

### Hardcoding Issues

### Insecure Data Storage

### Input Validation Issue

### Access Control Issues

[Infosec Institute's Full DiVA Walkthrough](https://resources.infosecinstitute.com/cracking-damn-insecure-and-vulnerable-apps-diva-part-1/#gref)


